/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as VolumesRouteImport } from './routes/volumes'
import { Route as ImagesRouteImport } from './routes/images'
import { Route as DockerErrorRouteImport } from './routes/docker-error'
import { Route as IndexRouteImport } from './routes/index'
import { Route as NetworksIndexRouteImport } from './routes/networks/index'
import { Route as ContainersIndexRouteImport } from './routes/containers/index'
import { Route as NetworksMapRouteImport } from './routes/networks/map'
import { Route as ContainersIdRouteImport } from './routes/containers/$id'

const VolumesRoute = VolumesRouteImport.update({
  id: '/volumes',
  path: '/volumes',
  getParentRoute: () => rootRouteImport,
} as any)
const ImagesRoute = ImagesRouteImport.update({
  id: '/images',
  path: '/images',
  getParentRoute: () => rootRouteImport,
} as any)
const DockerErrorRoute = DockerErrorRouteImport.update({
  id: '/docker-error',
  path: '/docker-error',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const NetworksIndexRoute = NetworksIndexRouteImport.update({
  id: '/networks/',
  path: '/networks/',
  getParentRoute: () => rootRouteImport,
} as any)
const ContainersIndexRoute = ContainersIndexRouteImport.update({
  id: '/containers/',
  path: '/containers/',
  getParentRoute: () => rootRouteImport,
} as any)
const NetworksMapRoute = NetworksMapRouteImport.update({
  id: '/networks/map',
  path: '/networks/map',
  getParentRoute: () => rootRouteImport,
} as any)
const ContainersIdRoute = ContainersIdRouteImport.update({
  id: '/containers/$id',
  path: '/containers/$id',
  getParentRoute: () => rootRouteImport,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/docker-error': typeof DockerErrorRoute
  '/images': typeof ImagesRoute
  '/volumes': typeof VolumesRoute
  '/containers/$id': typeof ContainersIdRoute
  '/networks/map': typeof NetworksMapRoute
  '/containers': typeof ContainersIndexRoute
  '/networks': typeof NetworksIndexRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/docker-error': typeof DockerErrorRoute
  '/images': typeof ImagesRoute
  '/volumes': typeof VolumesRoute
  '/containers/$id': typeof ContainersIdRoute
  '/networks/map': typeof NetworksMapRoute
  '/containers': typeof ContainersIndexRoute
  '/networks': typeof NetworksIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/docker-error': typeof DockerErrorRoute
  '/images': typeof ImagesRoute
  '/volumes': typeof VolumesRoute
  '/containers/$id': typeof ContainersIdRoute
  '/networks/map': typeof NetworksMapRoute
  '/containers/': typeof ContainersIndexRoute
  '/networks/': typeof NetworksIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/docker-error'
    | '/images'
    | '/volumes'
    | '/containers/$id'
    | '/networks/map'
    | '/containers'
    | '/networks'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/docker-error'
    | '/images'
    | '/volumes'
    | '/containers/$id'
    | '/networks/map'
    | '/containers'
    | '/networks'
  id:
    | '__root__'
    | '/'
    | '/docker-error'
    | '/images'
    | '/volumes'
    | '/containers/$id'
    | '/networks/map'
    | '/containers/'
    | '/networks/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  DockerErrorRoute: typeof DockerErrorRoute
  ImagesRoute: typeof ImagesRoute
  VolumesRoute: typeof VolumesRoute
  ContainersIdRoute: typeof ContainersIdRoute
  NetworksMapRoute: typeof NetworksMapRoute
  ContainersIndexRoute: typeof ContainersIndexRoute
  NetworksIndexRoute: typeof NetworksIndexRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/volumes': {
      id: '/volumes'
      path: '/volumes'
      fullPath: '/volumes'
      preLoaderRoute: typeof VolumesRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/images': {
      id: '/images'
      path: '/images'
      fullPath: '/images'
      preLoaderRoute: typeof ImagesRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/docker-error': {
      id: '/docker-error'
      path: '/docker-error'
      fullPath: '/docker-error'
      preLoaderRoute: typeof DockerErrorRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/networks/': {
      id: '/networks/'
      path: '/networks'
      fullPath: '/networks'
      preLoaderRoute: typeof NetworksIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/containers/': {
      id: '/containers/'
      path: '/containers'
      fullPath: '/containers'
      preLoaderRoute: typeof ContainersIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/networks/map': {
      id: '/networks/map'
      path: '/networks/map'
      fullPath: '/networks/map'
      preLoaderRoute: typeof NetworksMapRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/containers/$id': {
      id: '/containers/$id'
      path: '/containers/$id'
      fullPath: '/containers/$id'
      preLoaderRoute: typeof ContainersIdRouteImport
      parentRoute: typeof rootRouteImport
    }
  }
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  DockerErrorRoute: DockerErrorRoute,
  ImagesRoute: ImagesRoute,
  VolumesRoute: VolumesRoute,
  ContainersIdRoute: ContainersIdRoute,
  NetworksMapRoute: NetworksMapRoute,
  ContainersIndexRoute: ContainersIndexRoute,
  NetworksIndexRoute: NetworksIndexRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
