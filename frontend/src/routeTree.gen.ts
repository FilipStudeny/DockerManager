/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as DockerErrorRouteImport } from './routes/docker-error'
import { Route as IndexRouteImport } from './routes/index'
import { Route as VolumesIndexRouteImport } from './routes/volumes/index'
import { Route as NetworksIndexRouteImport } from './routes/networks/index'
import { Route as ImagesIndexRouteImport } from './routes/images/index'
import { Route as ContainersIndexRouteImport } from './routes/containers/index'
import { Route as VolumesCreateRouteImport } from './routes/volumes/create'
import { Route as NetworksMapRouteImport } from './routes/networks/map'
import { Route as NetworksCreateRouteImport } from './routes/networks/create'
import { Route as ImagesPullRouteImport } from './routes/images/pull'
import { Route as ContainersCreateRouteImport } from './routes/containers/create'
import { Route as ContainersIdIndexRouteImport } from './routes/containers/$id/index'
import { Route as ContainersIdTerminalRouteImport } from './routes/containers/$id/terminal'

const DockerErrorRoute = DockerErrorRouteImport.update({
  id: '/docker-error',
  path: '/docker-error',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const VolumesIndexRoute = VolumesIndexRouteImport.update({
  id: '/volumes/',
  path: '/volumes/',
  getParentRoute: () => rootRouteImport,
} as any)
const NetworksIndexRoute = NetworksIndexRouteImport.update({
  id: '/networks/',
  path: '/networks/',
  getParentRoute: () => rootRouteImport,
} as any)
const ImagesIndexRoute = ImagesIndexRouteImport.update({
  id: '/images/',
  path: '/images/',
  getParentRoute: () => rootRouteImport,
} as any)
const ContainersIndexRoute = ContainersIndexRouteImport.update({
  id: '/containers/',
  path: '/containers/',
  getParentRoute: () => rootRouteImport,
} as any)
const VolumesCreateRoute = VolumesCreateRouteImport.update({
  id: '/volumes/create',
  path: '/volumes/create',
  getParentRoute: () => rootRouteImport,
} as any)
const NetworksMapRoute = NetworksMapRouteImport.update({
  id: '/networks/map',
  path: '/networks/map',
  getParentRoute: () => rootRouteImport,
} as any)
const NetworksCreateRoute = NetworksCreateRouteImport.update({
  id: '/networks/create',
  path: '/networks/create',
  getParentRoute: () => rootRouteImport,
} as any)
const ImagesPullRoute = ImagesPullRouteImport.update({
  id: '/images/pull',
  path: '/images/pull',
  getParentRoute: () => rootRouteImport,
} as any)
const ContainersCreateRoute = ContainersCreateRouteImport.update({
  id: '/containers/create',
  path: '/containers/create',
  getParentRoute: () => rootRouteImport,
} as any)
const ContainersIdIndexRoute = ContainersIdIndexRouteImport.update({
  id: '/containers/$id/',
  path: '/containers/$id/',
  getParentRoute: () => rootRouteImport,
} as any)
const ContainersIdTerminalRoute = ContainersIdTerminalRouteImport.update({
  id: '/containers/$id/terminal',
  path: '/containers/$id/terminal',
  getParentRoute: () => rootRouteImport,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/docker-error': typeof DockerErrorRoute
  '/containers/create': typeof ContainersCreateRoute
  '/images/pull': typeof ImagesPullRoute
  '/networks/create': typeof NetworksCreateRoute
  '/networks/map': typeof NetworksMapRoute
  '/volumes/create': typeof VolumesCreateRoute
  '/containers': typeof ContainersIndexRoute
  '/images': typeof ImagesIndexRoute
  '/networks': typeof NetworksIndexRoute
  '/volumes': typeof VolumesIndexRoute
  '/containers/$id/terminal': typeof ContainersIdTerminalRoute
  '/containers/$id': typeof ContainersIdIndexRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/docker-error': typeof DockerErrorRoute
  '/containers/create': typeof ContainersCreateRoute
  '/images/pull': typeof ImagesPullRoute
  '/networks/create': typeof NetworksCreateRoute
  '/networks/map': typeof NetworksMapRoute
  '/volumes/create': typeof VolumesCreateRoute
  '/containers': typeof ContainersIndexRoute
  '/images': typeof ImagesIndexRoute
  '/networks': typeof NetworksIndexRoute
  '/volumes': typeof VolumesIndexRoute
  '/containers/$id/terminal': typeof ContainersIdTerminalRoute
  '/containers/$id': typeof ContainersIdIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/docker-error': typeof DockerErrorRoute
  '/containers/create': typeof ContainersCreateRoute
  '/images/pull': typeof ImagesPullRoute
  '/networks/create': typeof NetworksCreateRoute
  '/networks/map': typeof NetworksMapRoute
  '/volumes/create': typeof VolumesCreateRoute
  '/containers/': typeof ContainersIndexRoute
  '/images/': typeof ImagesIndexRoute
  '/networks/': typeof NetworksIndexRoute
  '/volumes/': typeof VolumesIndexRoute
  '/containers/$id/terminal': typeof ContainersIdTerminalRoute
  '/containers/$id/': typeof ContainersIdIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/docker-error'
    | '/containers/create'
    | '/images/pull'
    | '/networks/create'
    | '/networks/map'
    | '/volumes/create'
    | '/containers'
    | '/images'
    | '/networks'
    | '/volumes'
    | '/containers/$id/terminal'
    | '/containers/$id'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/docker-error'
    | '/containers/create'
    | '/images/pull'
    | '/networks/create'
    | '/networks/map'
    | '/volumes/create'
    | '/containers'
    | '/images'
    | '/networks'
    | '/volumes'
    | '/containers/$id/terminal'
    | '/containers/$id'
  id:
    | '__root__'
    | '/'
    | '/docker-error'
    | '/containers/create'
    | '/images/pull'
    | '/networks/create'
    | '/networks/map'
    | '/volumes/create'
    | '/containers/'
    | '/images/'
    | '/networks/'
    | '/volumes/'
    | '/containers/$id/terminal'
    | '/containers/$id/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  DockerErrorRoute: typeof DockerErrorRoute
  ContainersCreateRoute: typeof ContainersCreateRoute
  ImagesPullRoute: typeof ImagesPullRoute
  NetworksCreateRoute: typeof NetworksCreateRoute
  NetworksMapRoute: typeof NetworksMapRoute
  VolumesCreateRoute: typeof VolumesCreateRoute
  ContainersIndexRoute: typeof ContainersIndexRoute
  ImagesIndexRoute: typeof ImagesIndexRoute
  NetworksIndexRoute: typeof NetworksIndexRoute
  VolumesIndexRoute: typeof VolumesIndexRoute
  ContainersIdTerminalRoute: typeof ContainersIdTerminalRoute
  ContainersIdIndexRoute: typeof ContainersIdIndexRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/docker-error': {
      id: '/docker-error'
      path: '/docker-error'
      fullPath: '/docker-error'
      preLoaderRoute: typeof DockerErrorRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/volumes/': {
      id: '/volumes/'
      path: '/volumes'
      fullPath: '/volumes'
      preLoaderRoute: typeof VolumesIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/networks/': {
      id: '/networks/'
      path: '/networks'
      fullPath: '/networks'
      preLoaderRoute: typeof NetworksIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/images/': {
      id: '/images/'
      path: '/images'
      fullPath: '/images'
      preLoaderRoute: typeof ImagesIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/containers/': {
      id: '/containers/'
      path: '/containers'
      fullPath: '/containers'
      preLoaderRoute: typeof ContainersIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/volumes/create': {
      id: '/volumes/create'
      path: '/volumes/create'
      fullPath: '/volumes/create'
      preLoaderRoute: typeof VolumesCreateRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/networks/map': {
      id: '/networks/map'
      path: '/networks/map'
      fullPath: '/networks/map'
      preLoaderRoute: typeof NetworksMapRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/networks/create': {
      id: '/networks/create'
      path: '/networks/create'
      fullPath: '/networks/create'
      preLoaderRoute: typeof NetworksCreateRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/images/pull': {
      id: '/images/pull'
      path: '/images/pull'
      fullPath: '/images/pull'
      preLoaderRoute: typeof ImagesPullRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/containers/create': {
      id: '/containers/create'
      path: '/containers/create'
      fullPath: '/containers/create'
      preLoaderRoute: typeof ContainersCreateRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/containers/$id/': {
      id: '/containers/$id/'
      path: '/containers/$id'
      fullPath: '/containers/$id'
      preLoaderRoute: typeof ContainersIdIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/containers/$id/terminal': {
      id: '/containers/$id/terminal'
      path: '/containers/$id/terminal'
      fullPath: '/containers/$id/terminal'
      preLoaderRoute: typeof ContainersIdTerminalRouteImport
      parentRoute: typeof rootRouteImport
    }
  }
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  DockerErrorRoute: DockerErrorRoute,
  ContainersCreateRoute: ContainersCreateRoute,
  ImagesPullRoute: ImagesPullRoute,
  NetworksCreateRoute: NetworksCreateRoute,
  NetworksMapRoute: NetworksMapRoute,
  VolumesCreateRoute: VolumesCreateRoute,
  ContainersIndexRoute: ContainersIndexRoute,
  ImagesIndexRoute: ImagesIndexRoute,
  NetworksIndexRoute: NetworksIndexRoute,
  VolumesIndexRoute: VolumesIndexRoute,
  ContainersIdTerminalRoute: ContainersIdTerminalRoute,
  ContainersIdIndexRoute: ContainersIdIndexRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
