// This file is auto-generated by @hey-api/openapi-ts

import { type Options, rootGet, getDockerOverviewDockerOverviewGet, getTopContainersDockerTopContainersGet, getPerformanceWarningDockerPerformanceWarningGet, getLatestLogDockerLogsLatestGet, checkDockerStatusDockerStatusGet, listContainersContainersGet, getContainerDetailsContainersContainerIdGet, getContainerLogsContainersContainerIdLogsGet, startContainerContainersContainerIdStartPost, stopContainerContainersContainerIdStopPost, restartContainerContainersContainerIdRestartPost, listDockerImagesImagesGet, listDockerVolumesVolumesGet, getContainerVolumesContainersContainerIdVolumesGet } from '../sdk.gen';
import { queryOptions, type UseMutationOptions } from '@tanstack/react-query';
import type { RootGetData, GetDockerOverviewDockerOverviewGetData, GetTopContainersDockerTopContainersGetData, GetPerformanceWarningDockerPerformanceWarningGetData, GetLatestLogDockerLogsLatestGetData, CheckDockerStatusDockerStatusGetData, ListContainersContainersGetData, GetContainerDetailsContainersContainerIdGetData, GetContainerLogsContainersContainerIdLogsGetData, StartContainerContainersContainerIdStartPostData, StartContainerContainersContainerIdStartPostError, StartContainerContainersContainerIdStartPostResponse, StopContainerContainersContainerIdStopPostData, StopContainerContainersContainerIdStopPostError, StopContainerContainersContainerIdStopPostResponse, RestartContainerContainersContainerIdRestartPostData, RestartContainerContainersContainerIdRestartPostError, RestartContainerContainersContainerIdRestartPostResponse, ListDockerImagesImagesGetData, ListDockerVolumesVolumesGetData, GetContainerVolumesContainersContainerIdVolumesGetData } from '../types.gen';
import type { AxiosError } from 'axios';
import { client as _heyApiClient } from '../client.gen';

export type QueryKey<TOptions extends Options> = [
    Pick<TOptions, 'baseURL' | 'body' | 'headers' | 'path' | 'query'> & {
        _id: string;
        _infinite?: boolean;
    }
];

const createQueryKey = <TOptions extends Options>(id: string, options?: TOptions, infinite?: boolean): [
    QueryKey<TOptions>[0]
] => {
    const params: QueryKey<TOptions>[0] = { _id: id, baseURL: (options?.client ?? _heyApiClient).getConfig().baseURL } as QueryKey<TOptions>[0];
    if (infinite) {
        params._infinite = infinite;
    }
    if (options?.body) {
        params.body = options.body;
    }
    if (options?.headers) {
        params.headers = options.headers;
    }
    if (options?.path) {
        params.path = options.path;
    }
    if (options?.query) {
        params.query = options.query;
    }
    return [
        params
    ];
};

export const rootGetQueryKey = (options?: Options<RootGetData>) => createQueryKey('rootGet', options);

/**
 * Root
 */
export const rootGetOptions = (options?: Options<RootGetData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await rootGet({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: rootGetQueryKey(options)
    });
};

export const getDockerOverviewDockerOverviewGetQueryKey = (options?: Options<GetDockerOverviewDockerOverviewGetData>) => createQueryKey('getDockerOverviewDockerOverviewGet', options);

/**
 * Get Docker Overview
 */
export const getDockerOverviewDockerOverviewGetOptions = (options?: Options<GetDockerOverviewDockerOverviewGetData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getDockerOverviewDockerOverviewGet({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getDockerOverviewDockerOverviewGetQueryKey(options)
    });
};

export const getTopContainersDockerTopContainersGetQueryKey = (options?: Options<GetTopContainersDockerTopContainersGetData>) => createQueryKey('getTopContainersDockerTopContainersGet', options);

/**
 * Get Top Containers
 */
export const getTopContainersDockerTopContainersGetOptions = (options?: Options<GetTopContainersDockerTopContainersGetData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getTopContainersDockerTopContainersGet({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getTopContainersDockerTopContainersGetQueryKey(options)
    });
};

export const getPerformanceWarningDockerPerformanceWarningGetQueryKey = (options?: Options<GetPerformanceWarningDockerPerformanceWarningGetData>) => createQueryKey('getPerformanceWarningDockerPerformanceWarningGet', options);

/**
 * Get Performance Warning
 */
export const getPerformanceWarningDockerPerformanceWarningGetOptions = (options?: Options<GetPerformanceWarningDockerPerformanceWarningGetData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getPerformanceWarningDockerPerformanceWarningGet({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getPerformanceWarningDockerPerformanceWarningGetQueryKey(options)
    });
};

export const getLatestLogDockerLogsLatestGetQueryKey = (options?: Options<GetLatestLogDockerLogsLatestGetData>) => createQueryKey('getLatestLogDockerLogsLatestGet', options);

/**
 * Get Latest Log
 */
export const getLatestLogDockerLogsLatestGetOptions = (options?: Options<GetLatestLogDockerLogsLatestGetData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getLatestLogDockerLogsLatestGet({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getLatestLogDockerLogsLatestGetQueryKey(options)
    });
};

export const checkDockerStatusDockerStatusGetQueryKey = (options?: Options<CheckDockerStatusDockerStatusGetData>) => createQueryKey('checkDockerStatusDockerStatusGet', options);

/**
 * Check Docker Status
 */
export const checkDockerStatusDockerStatusGetOptions = (options?: Options<CheckDockerStatusDockerStatusGetData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await checkDockerStatusDockerStatusGet({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: checkDockerStatusDockerStatusGetQueryKey(options)
    });
};

export const listContainersContainersGetQueryKey = (options?: Options<ListContainersContainersGetData>) => createQueryKey('listContainersContainersGet', options);

/**
 * List Containers
 */
export const listContainersContainersGetOptions = (options?: Options<ListContainersContainersGetData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await listContainersContainersGet({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: listContainersContainersGetQueryKey(options)
    });
};

export const getContainerDetailsContainersContainerIdGetQueryKey = (options: Options<GetContainerDetailsContainersContainerIdGetData>) => createQueryKey('getContainerDetailsContainersContainerIdGet', options);

/**
 * Get Container Details
 */
export const getContainerDetailsContainersContainerIdGetOptions = (options: Options<GetContainerDetailsContainersContainerIdGetData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getContainerDetailsContainersContainerIdGet({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getContainerDetailsContainersContainerIdGetQueryKey(options)
    });
};

export const getContainerLogsContainersContainerIdLogsGetQueryKey = (options: Options<GetContainerLogsContainersContainerIdLogsGetData>) => createQueryKey('getContainerLogsContainersContainerIdLogsGet', options);

/**
 * Get Container Logs
 */
export const getContainerLogsContainersContainerIdLogsGetOptions = (options: Options<GetContainerLogsContainersContainerIdLogsGetData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getContainerLogsContainersContainerIdLogsGet({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getContainerLogsContainersContainerIdLogsGetQueryKey(options)
    });
};

export const startContainerContainersContainerIdStartPostQueryKey = (options: Options<StartContainerContainersContainerIdStartPostData>) => createQueryKey('startContainerContainersContainerIdStartPost', options);

/**
 * Start Container
 */
export const startContainerContainersContainerIdStartPostOptions = (options: Options<StartContainerContainersContainerIdStartPostData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await startContainerContainersContainerIdStartPost({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: startContainerContainersContainerIdStartPostQueryKey(options)
    });
};

/**
 * Start Container
 */
export const startContainerContainersContainerIdStartPostMutation = (options?: Partial<Options<StartContainerContainersContainerIdStartPostData>>): UseMutationOptions<StartContainerContainersContainerIdStartPostResponse, AxiosError<StartContainerContainersContainerIdStartPostError>, Options<StartContainerContainersContainerIdStartPostData>> => {
    const mutationOptions: UseMutationOptions<StartContainerContainersContainerIdStartPostResponse, AxiosError<StartContainerContainersContainerIdStartPostError>, Options<StartContainerContainersContainerIdStartPostData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await startContainerContainersContainerIdStartPost({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const stopContainerContainersContainerIdStopPostQueryKey = (options: Options<StopContainerContainersContainerIdStopPostData>) => createQueryKey('stopContainerContainersContainerIdStopPost', options);

/**
 * Stop Container
 */
export const stopContainerContainersContainerIdStopPostOptions = (options: Options<StopContainerContainersContainerIdStopPostData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await stopContainerContainersContainerIdStopPost({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: stopContainerContainersContainerIdStopPostQueryKey(options)
    });
};

/**
 * Stop Container
 */
export const stopContainerContainersContainerIdStopPostMutation = (options?: Partial<Options<StopContainerContainersContainerIdStopPostData>>): UseMutationOptions<StopContainerContainersContainerIdStopPostResponse, AxiosError<StopContainerContainersContainerIdStopPostError>, Options<StopContainerContainersContainerIdStopPostData>> => {
    const mutationOptions: UseMutationOptions<StopContainerContainersContainerIdStopPostResponse, AxiosError<StopContainerContainersContainerIdStopPostError>, Options<StopContainerContainersContainerIdStopPostData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await stopContainerContainersContainerIdStopPost({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const restartContainerContainersContainerIdRestartPostQueryKey = (options: Options<RestartContainerContainersContainerIdRestartPostData>) => createQueryKey('restartContainerContainersContainerIdRestartPost', options);

/**
 * Restart Container
 */
export const restartContainerContainersContainerIdRestartPostOptions = (options: Options<RestartContainerContainersContainerIdRestartPostData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await restartContainerContainersContainerIdRestartPost({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: restartContainerContainersContainerIdRestartPostQueryKey(options)
    });
};

/**
 * Restart Container
 */
export const restartContainerContainersContainerIdRestartPostMutation = (options?: Partial<Options<RestartContainerContainersContainerIdRestartPostData>>): UseMutationOptions<RestartContainerContainersContainerIdRestartPostResponse, AxiosError<RestartContainerContainersContainerIdRestartPostError>, Options<RestartContainerContainersContainerIdRestartPostData>> => {
    const mutationOptions: UseMutationOptions<RestartContainerContainersContainerIdRestartPostResponse, AxiosError<RestartContainerContainersContainerIdRestartPostError>, Options<RestartContainerContainersContainerIdRestartPostData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await restartContainerContainersContainerIdRestartPost({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const listDockerImagesImagesGetQueryKey = (options?: Options<ListDockerImagesImagesGetData>) => createQueryKey('listDockerImagesImagesGet', options);

/**
 * List Docker Images
 */
export const listDockerImagesImagesGetOptions = (options?: Options<ListDockerImagesImagesGetData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await listDockerImagesImagesGet({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: listDockerImagesImagesGetQueryKey(options)
    });
};

export const listDockerVolumesVolumesGetQueryKey = (options?: Options<ListDockerVolumesVolumesGetData>) => createQueryKey('listDockerVolumesVolumesGet', options);

/**
 * List Docker Volumes
 */
export const listDockerVolumesVolumesGetOptions = (options?: Options<ListDockerVolumesVolumesGetData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await listDockerVolumesVolumesGet({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: listDockerVolumesVolumesGetQueryKey(options)
    });
};

export const getContainerVolumesContainersContainerIdVolumesGetQueryKey = (options: Options<GetContainerVolumesContainersContainerIdVolumesGetData>) => createQueryKey('getContainerVolumesContainersContainerIdVolumesGet', options);

/**
 * Get Container Volumes
 */
export const getContainerVolumesContainersContainerIdVolumesGetOptions = (options: Options<GetContainerVolumesContainersContainerIdVolumesGetData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getContainerVolumesContainersContainerIdVolumesGet({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getContainerVolumesContainersContainerIdVolumesGetQueryKey(options)
    });
};