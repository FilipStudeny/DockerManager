// This file is auto-generated by @hey-api/openapi-ts

import type { Options as ClientOptions, TDataShape, Client } from './client';
import type { CheckDockerStatusData, CheckDockerStatusResponses, GetDockerOverviewData, GetDockerOverviewResponses, GetTopContainersData, GetTopContainersResponses, GetPerformanceWarningData, GetPerformanceWarningResponses, GetLatestLogData, GetLatestLogResponses, ListContainersData, ListContainersResponses, ListContainersErrors, DeleteContainerData, DeleteContainerResponses, DeleteContainerErrors, GetContainerDetailsData, GetContainerDetailsResponses, GetContainerDetailsErrors, GetContainerLogsData, GetContainerLogsResponses, GetContainerLogsErrors, StartContainerData, StartContainerResponses, StartContainerErrors, StopContainerData, StopContainerResponses, StopContainerErrors, RestartContainerData, RestartContainerResponses, RestartContainerErrors, ListDockerImagesData, ListDockerImagesResponses, ListDockerVolumesData, ListDockerVolumesResponses, CreateDockerVolumeData, CreateDockerVolumeResponses, CreateDockerVolumeErrors, DeleteDockerVolumeData, DeleteDockerVolumeResponses, DeleteDockerVolumeErrors, GetContainerVolumesData, GetContainerVolumesResponses, GetContainerVolumesErrors, GetDockerNetworksOverviewData, GetDockerNetworksOverviewResponses, GetDockerNetworkMapData, GetDockerNetworkMapResponses, StreamPullWithSummaryData, StreamPullWithSummaryResponses, StreamPullWithSummaryErrors, ListDockerVolumesLiteData, ListDockerVolumesLiteResponses, AttachVolumeToContainerData, AttachVolumeToContainerResponses, AttachVolumeToContainerErrors, CreateContainerWithLogsData, CreateContainerWithLogsResponses, CreateContainerWithLogsErrors, DeleteDockerImageData, DeleteDockerImageResponses, DeleteDockerImageErrors, DeleteDockerNetworkData, DeleteDockerNetworkResponses, DeleteDockerNetworkErrors, CreateDockerNetworkData, CreateDockerNetworkResponses, CreateDockerNetworkErrors, AssignNetworkToContainerData, AssignNetworkToContainerResponses, AssignNetworkToContainerErrors, DisconnectNetworkFromContainerData, DisconnectNetworkFromContainerResponses, DisconnectNetworkFromContainerErrors, AssignMultipleNetworksToContainerData, AssignMultipleNetworksToContainerResponses, AssignMultipleNetworksToContainerErrors, AssignNetworkWithStaticIpData, AssignNetworkWithStaticIpResponses, AssignNetworkWithStaticIpErrors, ListDockerNetworksLiteData, ListDockerNetworksLiteResponses } from './types.gen';
import { client as _heyApiClient } from './client.gen';

export type Options<TData extends TDataShape = TDataShape, ThrowOnError extends boolean = boolean> = ClientOptions<TData, ThrowOnError> & {
    /**
     * You can provide a client instance returned by `createClient()` instead of
     * individual options. This might be also useful if you want to implement a
     * custom client.
     */
    client?: Client;
    /**
     * You can pass arbitrary values through the `meta` object. This can be
     * used to access values that aren't defined as part of the SDK function.
     */
    meta?: Record<string, unknown>;
};

/**
 * Check Docker Status
 */
export const checkDockerStatus = <ThrowOnError extends boolean = false>(options?: Options<CheckDockerStatusData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<CheckDockerStatusResponses, unknown, ThrowOnError>({
        responseType: 'json',
        url: '/docker-status',
        ...options
    });
};

/**
 * Get Docker Overview
 */
export const getDockerOverview = <ThrowOnError extends boolean = false>(options?: Options<GetDockerOverviewData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetDockerOverviewResponses, unknown, ThrowOnError>({
        responseType: 'json',
        url: '/docker/overview',
        ...options
    });
};

/**
 * Get Top Containers
 */
export const getTopContainers = <ThrowOnError extends boolean = false>(options?: Options<GetTopContainersData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetTopContainersResponses, unknown, ThrowOnError>({
        responseType: 'json',
        url: '/docker/top-containers',
        ...options
    });
};

/**
 * Get Performance Warning
 */
export const getPerformanceWarning = <ThrowOnError extends boolean = false>(options?: Options<GetPerformanceWarningData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetPerformanceWarningResponses, unknown, ThrowOnError>({
        responseType: 'json',
        url: '/docker/performance-warning',
        ...options
    });
};

/**
 * Get Latest Log
 */
export const getLatestLog = <ThrowOnError extends boolean = false>(options?: Options<GetLatestLogData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetLatestLogResponses, unknown, ThrowOnError>({
        responseType: 'json',
        url: '/docker/logs/latest',
        ...options
    });
};

/**
 * List Containers
 */
export const listContainers = <ThrowOnError extends boolean = false>(options?: Options<ListContainersData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<ListContainersResponses, ListContainersErrors, ThrowOnError>({
        responseType: 'json',
        url: '/containers',
        ...options
    });
};

/**
 * Delete a Docker container by ID or name
 */
export const deleteContainer = <ThrowOnError extends boolean = false>(options: Options<DeleteContainerData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteContainerResponses, DeleteContainerErrors, ThrowOnError>({
        responseType: 'json',
        url: '/containers/{container_id}',
        ...options
    });
};

/**
 * Get Container Details
 */
export const getContainerDetails = <ThrowOnError extends boolean = false>(options: Options<GetContainerDetailsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetContainerDetailsResponses, GetContainerDetailsErrors, ThrowOnError>({
        responseType: 'json',
        url: '/containers/{container_id}',
        ...options
    });
};

/**
 * Get Container Logs
 */
export const getContainerLogs = <ThrowOnError extends boolean = false>(options: Options<GetContainerLogsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetContainerLogsResponses, GetContainerLogsErrors, ThrowOnError>({
        responseType: 'json',
        url: '/containers/{container_id}/logs',
        ...options
    });
};

/**
 * Start Container
 */
export const startContainer = <ThrowOnError extends boolean = false>(options: Options<StartContainerData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<StartContainerResponses, StartContainerErrors, ThrowOnError>({
        responseType: 'json',
        url: '/containers/{container_id}/start',
        ...options
    });
};

/**
 * Stop Container
 */
export const stopContainer = <ThrowOnError extends boolean = false>(options: Options<StopContainerData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<StopContainerResponses, StopContainerErrors, ThrowOnError>({
        responseType: 'json',
        url: '/containers/{container_id}/stop',
        ...options
    });
};

/**
 * Restart Container
 */
export const restartContainer = <ThrowOnError extends boolean = false>(options: Options<RestartContainerData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<RestartContainerResponses, RestartContainerErrors, ThrowOnError>({
        responseType: 'json',
        url: '/containers/{container_id}/restart',
        ...options
    });
};

/**
 * List Docker Images
 */
export const listDockerImages = <ThrowOnError extends boolean = false>(options?: Options<ListDockerImagesData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<ListDockerImagesResponses, unknown, ThrowOnError>({
        responseType: 'json',
        url: '/images',
        ...options
    });
};

/**
 * List Docker Volumes
 */
export const listDockerVolumes = <ThrowOnError extends boolean = false>(options?: Options<ListDockerVolumesData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<ListDockerVolumesResponses, unknown, ThrowOnError>({
        responseType: 'json',
        url: '/volumes',
        ...options
    });
};

/**
 * Create a Docker volume and return metadata
 */
export const createDockerVolume = <ThrowOnError extends boolean = false>(options: Options<CreateDockerVolumeData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CreateDockerVolumeResponses, CreateDockerVolumeErrors, ThrowOnError>({
        responseType: 'json',
        url: '/volumes',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Delete a Docker volume if not in use
 */
export const deleteDockerVolume = <ThrowOnError extends boolean = false>(options: Options<DeleteDockerVolumeData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteDockerVolumeResponses, DeleteDockerVolumeErrors, ThrowOnError>({
        responseType: 'json',
        url: '/volumes/{volume_name}',
        ...options
    });
};

/**
 * Get Container Volumes
 */
export const getContainerVolumes = <ThrowOnError extends boolean = false>(options: Options<GetContainerVolumesData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetContainerVolumesResponses, GetContainerVolumesErrors, ThrowOnError>({
        responseType: 'json',
        url: '/containers/{container_id}/volumes',
        ...options
    });
};

/**
 * Get Docker Networks Overview
 */
export const getDockerNetworksOverview = <ThrowOnError extends boolean = false>(options?: Options<GetDockerNetworksOverviewData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetDockerNetworksOverviewResponses, unknown, ThrowOnError>({
        responseType: 'json',
        url: '/docker/networks/overview',
        ...options
    });
};

/**
 * Get Docker Network Node Map
 */
export const getDockerNetworkMap = <ThrowOnError extends boolean = false>(options?: Options<GetDockerNetworkMapData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetDockerNetworkMapResponses, unknown, ThrowOnError>({
        responseType: 'json',
        url: '/docker/networks/map',
        ...options
    });
};

/**
 * Stream Docker image pull with progress and summary
 */
export const streamPullWithSummary = <ThrowOnError extends boolean = false>(options: Options<StreamPullWithSummaryData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<StreamPullWithSummaryResponses, StreamPullWithSummaryErrors, ThrowOnError>({
        url: '/images/pull/full',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * List all Docker volumes with ID and name
 */
export const listDockerVolumesLite = <ThrowOnError extends boolean = false>(options?: Options<ListDockerVolumesLiteData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<ListDockerVolumesLiteResponses, unknown, ThrowOnError>({
        responseType: 'json',
        url: '/volumes/list',
        ...options
    });
};

/**
 * Attach a volume to a stopped container and recreate it
 */
export const attachVolumeToContainer = <ThrowOnError extends boolean = false>(options: Options<AttachVolumeToContainerData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<AttachVolumeToContainerResponses, AttachVolumeToContainerErrors, ThrowOnError>({
        responseType: 'json',
        url: '/containers/{container_id}/attach-volume',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Create a Docker container and stream progress logs
 */
export const createContainerWithLogs = <ThrowOnError extends boolean = false>(options: Options<CreateContainerWithLogsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CreateContainerWithLogsResponses, CreateContainerWithLogsErrors, ThrowOnError>({
        url: '/containers/create',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Delete a Docker image by ID or tag
 */
export const deleteDockerImage = <ThrowOnError extends boolean = false>(options: Options<DeleteDockerImageData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteDockerImageResponses, DeleteDockerImageErrors, ThrowOnError>({
        responseType: 'json',
        url: '/images/{image_id}',
        ...options
    });
};

/**
 * Delete a Docker network by ID or name, only if no containers are attached
 */
export const deleteDockerNetwork = <ThrowOnError extends boolean = false>(options: Options<DeleteDockerNetworkData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteDockerNetworkResponses, DeleteDockerNetworkErrors, ThrowOnError>({
        responseType: 'json',
        url: '/docker/networks/{network_id}',
        ...options
    });
};

/**
 * Create a Docker network
 */
export const createDockerNetwork = <ThrowOnError extends boolean = false>(options: Options<CreateDockerNetworkData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CreateDockerNetworkResponses, CreateDockerNetworkErrors, ThrowOnError>({
        responseType: 'json',
        url: '/docker/networks',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Assign a Docker network to a container
 */
export const assignNetworkToContainer = <ThrowOnError extends boolean = false>(options: Options<AssignNetworkToContainerData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<AssignNetworkToContainerResponses, AssignNetworkToContainerErrors, ThrowOnError>({
        responseType: 'json',
        url: '/containers/{container_id}/assign-network',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Disconnect a Docker network from a container
 */
export const disconnectNetworkFromContainer = <ThrowOnError extends boolean = false>(options: Options<DisconnectNetworkFromContainerData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<DisconnectNetworkFromContainerResponses, DisconnectNetworkFromContainerErrors, ThrowOnError>({
        responseType: 'json',
        url: '/containers/{container_id}/disconnect-network',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Assign multiple Docker networks to a container
 */
export const assignMultipleNetworksToContainer = <ThrowOnError extends boolean = false>(options: Options<AssignMultipleNetworksToContainerData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<AssignMultipleNetworksToContainerResponses, AssignMultipleNetworksToContainerErrors, ThrowOnError>({
        responseType: 'json',
        url: '/containers/{container_id}/assign-networks',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Assign a Docker network to a container with optional static IP
 */
export const assignNetworkWithStaticIp = <ThrowOnError extends boolean = false>(options: Options<AssignNetworkWithStaticIpData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<AssignNetworkWithStaticIpResponses, AssignNetworkWithStaticIpErrors, ThrowOnError>({
        responseType: 'json',
        url: '/containers/{container_id}/assign-network-ip',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * List Docker networks for dropdown selection
 */
export const listDockerNetworksLite = <ThrowOnError extends boolean = false>(options?: Options<ListDockerNetworksLiteData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<ListDockerNetworksLiteResponses, unknown, ThrowOnError>({
        responseType: 'json',
        url: '/docker/networks/list',
        ...options
    });
};