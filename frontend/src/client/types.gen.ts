// This file is auto-generated by @hey-api/openapi-ts

/**
 * ContainerDetails
 */
export type ContainerDetails = {
    /**
     * Id
     * Short container ID
     */
    id: string;
    /**
     * Name
     * Container name
     */
    name: string;
    /**
     * Current container status
     */
    status: ContainerStatusEnum;
    /**
     * Image
     * List of container image tags
     */
    image: Array<string>;
    /**
     * Command
     * Startup command
     */
    command: string;
    /**
     * Created At
     * Timestamp of container creation (ISO 8601)
     */
    created_at: string;
    /**
     * Uptime Seconds
     * How long the container has been running (in seconds)
     */
    uptime_seconds?: number | null;
    /**
     * Ports
     * Published ports
     */
    ports?: Array<PortBinding>;
    /**
     * Error Count
     * Number of error events for the container
     */
    error_count?: number;
    /**
     * Latest Error Message
     * Most recent error message, if any
     */
    latest_error_message?: string | null;
    /**
     * Volumes
     */
    volumes: number;
    /**
     * Ip Address
     * Container's internal IP address
     */
    ip_address: string;
    /**
     * Network Mode
     * Docker network mode (e.g. bridge, host)
     */
    network_mode: string;
    /**
     * Created
     * Raw container creation timestamp
     */
    created: string;
    /**
     * Platform
     * Platform or architecture (e.g. linux/amd64)
     */
    platform?: string | null;
    /**
     * Cpu Percent
     * Current CPU usage percentage
     */
    cpu_percent: number;
    /**
     * Memory Usage
     * Current memory usage in bytes
     */
    memory_usage: number;
    /**
     * Memory Limit
     * Memory limit in bytes
     */
    memory_limit: number;
    /**
     * Cpu Limit
     * CPU quota limit, if set (in cores)
     */
    cpu_limit?: number | null;
    /**
     * Mounts
     * List of mounted volumes/binds
     */
    mounts?: Array<MountInfo>;
    /**
     * Labels
     * User-defined metadata labels
     */
    labels?: {
        [key: string]: string;
    };
    /**
     * Env
     * List of environment variables
     */
    env?: Array<string>;
    /**
     * Restart Policy
     * Restart policy configuration
     */
    restart_policy?: {
        [key: string]: unknown;
    } | null;
    /**
     * Privileged
     * If the container is running in privileged mode
     */
    privileged?: boolean | null;
    /**
     * Log Path
     * Path to the container log file on the host
     */
    log_path?: string | null;
    /**
     * Entrypoint
     * Entrypoint for the container
     */
    entrypoint?: string | null;
    /**
     * Pid
     * Main process PID
     */
    pid?: number | null;
    /**
     * Exit Code
     * Exit code of the container if it has stopped
     */
    exit_code?: number | null;
    /**
     * State
     * Raw container state (e.g. running, exited)
     */
    state?: string | null;
};

/**
 * ContainerLogsResponse
 */
export type ContainerLogsResponse = {
    /**
     * Logs
     */
    logs: Array<LogEntry>;
    /**
     * Next Since
     */
    next_since: number | null;
    /**
     * Count
     */
    count: number;
};

/**
 * ContainerNode
 */
export type ContainerNode = {
    /**
     * Id
     */
    id: string;
    /**
     * Label
     */
    label: string;
    /**
     * Type
     */
    type: 'container';
    /**
     * Status
     */
    status: string;
    /**
     * Clusterid
     */
    clusterId: string | null;
};

/**
 * ContainerStats
 */
export type ContainerStats = {
    /**
     * Id
     */
    id: string;
    /**
     * Name
     */
    name: string;
    /**
     * Cpu
     * CPU usage in percent
     */
    cpu: number;
    /**
     * Memory
     * Memory usage in percent
     */
    memory: number;
};

/**
 * ContainerStatusEnum
 */
export type ContainerStatusEnum = 'RUNNING' | 'STOPPED' | 'RESTARTED' | 'FAILED';

/**
 * ContainerSummary
 */
export type ContainerSummary = {
    /**
     * Id
     * Short container ID
     */
    id: string;
    /**
     * Name
     * Container name
     */
    name: string;
    /**
     * Current container status
     */
    status: ContainerStatusEnum;
    /**
     * Image
     * List of container image tags
     */
    image: Array<string>;
    /**
     * Command
     * Startup command
     */
    command: string;
    /**
     * Created At
     * Timestamp of container creation (ISO 8601)
     */
    created_at: string;
    /**
     * Uptime Seconds
     * How long the container has been running (in seconds)
     */
    uptime_seconds?: number | null;
    /**
     * Ports
     * Published ports
     */
    ports?: Array<PortBinding>;
    /**
     * Error Count
     * Number of error events for the container
     */
    error_count?: number;
    /**
     * Latest Error Message
     * Most recent error message, if any
     */
    latest_error_message?: string | null;
    /**
     * Volumes
     */
    volumes: number;
};

/**
 * DockerImageSummary
 */
export type DockerImageSummary = {
    /**
     * Id
     */
    id: string;
    /**
     * Tags
     */
    tags: Array<string>;
    /**
     * Size
     */
    size: number;
    /**
     * Created
     */
    created: string | null;
    /**
     * Architecture
     */
    architecture: string | null;
    /**
     * Os
     */
    os: string | null;
};

/**
 * DockerNetworkGraphResponse
 */
export type DockerNetworkGraphResponse = {
    /**
     * Nodes
     */
    nodes: Array<ContainerNode | NetworkNode>;
    /**
     * Links
     */
    links: Array<Link>;
};

/**
 * DockerNetworkOverview
 */
export type DockerNetworkOverview = {
    /**
     * Id
     */
    id: string;
    /**
     * Name
     */
    name: string;
    /**
     * Driver
     */
    driver: string;
    /**
     * Scope
     */
    scope: string;
    /**
     * Containers Count
     */
    containers_count: number;
    /**
     * Running Containers Count
     */
    running_containers_count: number;
    /**
     * Labels
     */
    labels: {
        [key: string]: unknown;
    } | null;
    /**
     * Internal
     */
    internal: boolean;
    /**
     * Attachable
     */
    attachable: boolean;
    /**
     * Containers
     */
    containers: Array<NetworkContainerInfo>;
};

/**
 * DockerOverview
 */
export type DockerOverview = {
    /**
     * Version
     */
    version: string;
    /**
     * Total Containers
     */
    total_containers: number;
    /**
     * Running Containers
     */
    running_containers: number;
    /**
     * Failed Containers
     */
    failed_containers: number;
    /**
     * Images
     */
    images: number;
    /**
     * Volumes
     */
    volumes: number;
    /**
     * Logs Count
     */
    logs_count: number;
};

/**
 * DockerVolumeSummary
 */
export type DockerVolumeSummary = {
    /**
     * Name
     * Volume name (if named Docker volume)
     */
    name?: string | null;
    /**
     * Type
     * Type of mount: volume or bind
     */
    type: string;
    /**
     * Source
     * Host source path or volume name
     */
    source: string;
    /**
     * Destination
     * Mount point inside the container
     */
    destination: string;
    /**
     * Driver
     * Volume driver (Docker-managed only)
     */
    driver?: string | null;
    /**
     * Mountpoint
     * Where the volume is mounted on host
     */
    mountpoint?: string | null;
    /**
     * Created At
     * Creation timestamp (Docker volumes)
     */
    created_at?: string | null;
    /**
     * Size
     * Human-readable volume size (if available)
     */
    size?: string | null;
    /**
     * Labels
     * Metadata labels (Docker volumes)
     */
    labels?: {
        [key: string]: string;
    };
};

/**
 * GenericMessageResponse
 */
export type GenericMessageResponse = {
    /**
     * Success
     * Indicates if the operation was successful
     */
    success?: boolean | null;
    /**
     * Code
     * HTTP-like status code representing the outcome
     */
    code?: number | null;
    /**
     * Message
     * Human-readable message explaining the result
     */
    message?: string | null;
};

/**
 * HTTPValidationError
 */
export type HttpValidationError = {
    /**
     * Detail
     */
    detail?: Array<ValidationError>;
};

/**
 * Link
 */
export type Link = {
    /**
     * Source
     */
    source: string;
    /**
     * Target
     */
    target: string;
};

/**
 * LogEntry
 */
export type LogEntry = {
    /**
     * Timestamp
     */
    timestamp: string;
    /**
     * Message
     */
    message: string;
};

/**
 * LogInfo
 */
export type LogInfo = {
    /**
     * Count
     * Total number of log entries
     */
    count: number;
    /**
     * Latest
     * Most recent log message
     */
    latest: string;
};

/**
 * MountInfo
 */
export type MountInfo = {
    /**
     * Source
     * Host path or volume name
     */
    source?: string | null;
    /**
     * Destination
     * Mount point inside the container
     */
    destination: string;
    /**
     * Mode
     * Read/write mode (e.g. 'rw')
     */
    mode?: string | null;
    /**
     * Type
     * Mount type (e.g. 'bind', 'volume')
     */
    type?: string | null;
};

/**
 * NetworkContainerInfo
 */
export type NetworkContainerInfo = {
    /**
     * Id
     */
    id: string;
    /**
     * Name
     */
    name: string | null;
    /**
     * Status
     */
    status: string | null;
    /**
     * Ipv4 Address
     */
    ipv4_address: string | null;
};

/**
 * NetworkNode
 */
export type NetworkNode = {
    /**
     * Id
     */
    id: string;
    /**
     * Label
     */
    label: string;
    /**
     * Type
     */
    type: 'network';
};

/**
 * PerformanceWarning
 */
export type PerformanceWarning = {
    /**
     * Message
     */
    message: string;
};

/**
 * PortBinding
 */
export type PortBinding = {
    /**
     * Container Port
     * Port exposed in container (e.g. '80/tcp')
     */
    container_port: string;
    /**
     * Host Ip
     * Host IP (if published)
     */
    host_ip?: string | null;
    /**
     * Host Port
     * Published host port (if any)
     */
    host_port?: string | null;
};

/**
 * ValidationError
 */
export type ValidationError = {
    /**
     * Location
     */
    loc: Array<string | number>;
    /**
     * Message
     */
    msg: string;
    /**
     * Error Type
     */
    type: string;
};

export type CheckDockerStatusData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/docker-status';
};

export type CheckDockerStatusResponses = {
    /**
     * Successful Response
     */
    200: GenericMessageResponse;
};

export type CheckDockerStatusResponse = CheckDockerStatusResponses[keyof CheckDockerStatusResponses];

export type GetDockerOverviewData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/docker/overview';
};

export type GetDockerOverviewResponses = {
    /**
     * Successful Response
     */
    200: DockerOverview;
};

export type GetDockerOverviewResponse = GetDockerOverviewResponses[keyof GetDockerOverviewResponses];

export type GetTopContainersData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/docker/top-containers';
};

export type GetTopContainersResponses = {
    /**
     * Response Gettopcontainers
     * Successful Response
     */
    200: Array<ContainerStats>;
};

export type GetTopContainersResponse = GetTopContainersResponses[keyof GetTopContainersResponses];

export type GetPerformanceWarningData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/docker/performance-warning';
};

export type GetPerformanceWarningResponses = {
    /**
     * Successful Response
     */
    200: PerformanceWarning;
};

export type GetPerformanceWarningResponse = GetPerformanceWarningResponses[keyof GetPerformanceWarningResponses];

export type GetLatestLogData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/docker/logs/latest';
};

export type GetLatestLogResponses = {
    /**
     * Successful Response
     */
    200: LogInfo;
};

export type GetLatestLogResponse = GetLatestLogResponses[keyof GetLatestLogResponses];

export type ListContainersData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * All
         * Show all containers, including stopped
         */
        all?: boolean;
    };
    url: '/containers';
};

export type ListContainersErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type ListContainersError = ListContainersErrors[keyof ListContainersErrors];

export type ListContainersResponses = {
    /**
     * Response Listcontainers
     * Successful Response
     */
    200: Array<ContainerSummary>;
};

export type ListContainersResponse = ListContainersResponses[keyof ListContainersResponses];

export type GetContainerDetailsData = {
    body?: never;
    path: {
        /**
         * Container Id
         */
        container_id: string;
    };
    query?: never;
    url: '/containers/{container_id}';
};

export type GetContainerDetailsErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type GetContainerDetailsError = GetContainerDetailsErrors[keyof GetContainerDetailsErrors];

export type GetContainerDetailsResponses = {
    /**
     * Successful Response
     */
    200: ContainerDetails;
};

export type GetContainerDetailsResponse = GetContainerDetailsResponses[keyof GetContainerDetailsResponses];

export type GetContainerLogsData = {
    body?: never;
    path: {
        /**
         * Container Id
         */
        container_id: string;
    };
    query?: {
        /**
         * Tail
         */
        tail?: number;
        /**
         * Since
         * Unix timestamp to start from
         */
        since?: number | null;
        /**
         * Until
         * Unix timestamp to end at
         */
        until?: number | null;
    };
    url: '/containers/{container_id}/logs';
};

export type GetContainerLogsErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type GetContainerLogsError = GetContainerLogsErrors[keyof GetContainerLogsErrors];

export type GetContainerLogsResponses = {
    /**
     * Successful Response
     */
    200: ContainerLogsResponse;
};

export type GetContainerLogsResponse = GetContainerLogsResponses[keyof GetContainerLogsResponses];

export type StartContainerData = {
    body?: never;
    path: {
        /**
         * Container Id
         */
        container_id: string;
    };
    query?: never;
    url: '/containers/{container_id}/start';
};

export type StartContainerErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type StartContainerError = StartContainerErrors[keyof StartContainerErrors];

export type StartContainerResponses = {
    /**
     * Successful Response
     */
    200: GenericMessageResponse;
};

export type StartContainerResponse = StartContainerResponses[keyof StartContainerResponses];

export type StopContainerData = {
    body?: never;
    path: {
        /**
         * Container Id
         */
        container_id: string;
    };
    query?: never;
    url: '/containers/{container_id}/stop';
};

export type StopContainerErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type StopContainerError = StopContainerErrors[keyof StopContainerErrors];

export type StopContainerResponses = {
    /**
     * Successful Response
     */
    200: GenericMessageResponse;
};

export type StopContainerResponse = StopContainerResponses[keyof StopContainerResponses];

export type RestartContainerData = {
    body?: never;
    path: {
        /**
         * Container Id
         */
        container_id: string;
    };
    query?: never;
    url: '/containers/{container_id}/restart';
};

export type RestartContainerErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type RestartContainerError = RestartContainerErrors[keyof RestartContainerErrors];

export type RestartContainerResponses = {
    /**
     * Successful Response
     */
    200: GenericMessageResponse;
};

export type RestartContainerResponse = RestartContainerResponses[keyof RestartContainerResponses];

export type ListDockerImagesData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/images';
};

export type ListDockerImagesResponses = {
    /**
     * Response Listdockerimages
     * Successful Response
     */
    200: Array<DockerImageSummary>;
};

export type ListDockerImagesResponse = ListDockerImagesResponses[keyof ListDockerImagesResponses];

export type ListDockerVolumesData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/volumes';
};

export type ListDockerVolumesResponses = {
    /**
     * Response Listdockervolumes
     * Successful Response
     */
    200: Array<DockerVolumeSummary>;
};

export type ListDockerVolumesResponse = ListDockerVolumesResponses[keyof ListDockerVolumesResponses];

export type GetContainerVolumesData = {
    body?: never;
    path: {
        /**
         * Container Id
         */
        container_id: string;
    };
    query?: never;
    url: '/containers/{container_id}/volumes';
};

export type GetContainerVolumesErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type GetContainerVolumesError = GetContainerVolumesErrors[keyof GetContainerVolumesErrors];

export type GetContainerVolumesResponses = {
    /**
     * Response Getcontainervolumes
     * Successful Response
     */
    200: Array<DockerVolumeSummary>;
};

export type GetContainerVolumesResponse = GetContainerVolumesResponses[keyof GetContainerVolumesResponses];

export type GetDockerNetworksOverviewData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/docker/networks/overview';
};

export type GetDockerNetworksOverviewResponses = {
    /**
     * Response Getdockernetworksoverview
     * Successful Response
     */
    200: Array<DockerNetworkOverview>;
};

export type GetDockerNetworksOverviewResponse = GetDockerNetworksOverviewResponses[keyof GetDockerNetworksOverviewResponses];

export type GetDockerNetworkMapData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/docker/networks/map';
};

export type GetDockerNetworkMapResponses = {
    /**
     * Successful Response
     */
    200: DockerNetworkGraphResponse;
};

export type GetDockerNetworkMapResponse = GetDockerNetworkMapResponses[keyof GetDockerNetworkMapResponses];

export type ClientOptions = {
    baseURL: 'http://localhost:8000' | (string & {});
};