// This file is auto-generated by @hey-api/openapi-ts

/**
 * ContainerDetails
 */
export type ContainerDetails = {
    /**
     * Id
     * Short container ID
     */
    id: string;
    /**
     * Name
     * Container name
     */
    name: string;
    /**
     * Current container status
     */
    status: ContainerStatusEnum;
    /**
     * Image
     * List of container image tags
     */
    image: Array<string>;
    /**
     * Command
     * Startup command
     */
    command: string;
    /**
     * Created At
     * Timestamp of container creation (ISO 8601)
     */
    created_at: string;
    /**
     * Uptime Seconds
     * How long the container has been running (in seconds)
     */
    uptime_seconds?: number | null;
    /**
     * Ports
     * Published ports
     */
    ports?: Array<PortBinding>;
    /**
     * Error Count
     * Number of error events for the container
     */
    error_count?: number;
    /**
     * Latest Error Message
     * Most recent error message, if any
     */
    latest_error_message?: string | null;
    /**
     * Volumes
     */
    volumes: number;
    /**
     * Ip Address
     * Container's internal IP address
     */
    ip_address: string;
    /**
     * Network Mode
     * Docker network mode (e.g. bridge, host)
     */
    network_mode: string;
    /**
     * Created
     * Raw container creation timestamp
     */
    created: string;
    /**
     * Platform
     * Platform or architecture (e.g. linux/amd64)
     */
    platform?: string | null;
    /**
     * Cpu Percent
     * Current CPU usage percentage
     */
    cpu_percent: number;
    /**
     * Memory Usage
     * Current memory usage in bytes
     */
    memory_usage: number;
    /**
     * Memory Limit
     * Memory limit in bytes
     */
    memory_limit: number;
    /**
     * Cpu Limit
     * CPU quota limit, if set (in cores)
     */
    cpu_limit?: number | null;
    /**
     * Mounts
     * List of mounted volumes/binds
     */
    mounts?: Array<MountInfo>;
    /**
     * Labels
     * User-defined metadata labels
     */
    labels?: {
        [key: string]: string;
    };
    /**
     * Env
     * List of environment variables
     */
    env?: Array<string>;
    /**
     * Restart Policy
     * Restart policy configuration
     */
    restart_policy?: {
        [key: string]: unknown;
    } | null;
    /**
     * Privileged
     * If the container is running in privileged mode
     */
    privileged?: boolean | null;
    /**
     * Log Path
     * Path to the container log file on the host
     */
    log_path?: string | null;
    /**
     * Entrypoint
     * Entrypoint for the container
     */
    entrypoint?: string | null;
    /**
     * Pid
     * Main process PID
     */
    pid?: number | null;
    /**
     * Exit Code
     * Exit code of the container if it has stopped
     */
    exit_code?: number | null;
    /**
     * State
     * Raw container state (e.g. running, exited)
     */
    state?: string | null;
};

/**
 * ContainerStats
 */
export type ContainerStats = {
    /**
     * Id
     */
    id: string;
    /**
     * Name
     */
    name: string;
    /**
     * Cpu
     * CPU usage in percent
     */
    cpu: number;
    /**
     * Memory
     * Memory usage in percent
     */
    memory: number;
};

/**
 * ContainerStatusEnum
 */
export type ContainerStatusEnum = 'RUNNING' | 'STOPPED' | 'RESTARTED' | 'FAILED';

/**
 * ContainerSummary
 */
export type ContainerSummary = {
    /**
     * Id
     * Short container ID
     */
    id: string;
    /**
     * Name
     * Container name
     */
    name: string;
    /**
     * Current container status
     */
    status: ContainerStatusEnum;
    /**
     * Image
     * List of container image tags
     */
    image: Array<string>;
    /**
     * Command
     * Startup command
     */
    command: string;
    /**
     * Created At
     * Timestamp of container creation (ISO 8601)
     */
    created_at: string;
    /**
     * Uptime Seconds
     * How long the container has been running (in seconds)
     */
    uptime_seconds?: number | null;
    /**
     * Ports
     * Published ports
     */
    ports?: Array<PortBinding>;
    /**
     * Error Count
     * Number of error events for the container
     */
    error_count?: number;
    /**
     * Latest Error Message
     * Most recent error message, if any
     */
    latest_error_message?: string | null;
    /**
     * Volumes
     */
    volumes: number;
};

/**
 * DockerImageSummary
 */
export type DockerImageSummary = {
    /**
     * Id
     */
    id: string;
    /**
     * Tags
     */
    tags: Array<string>;
    /**
     * Size
     */
    size: number;
    /**
     * Created
     */
    created: string | null;
    /**
     * Architecture
     */
    architecture: string | null;
    /**
     * Os
     */
    os: string | null;
};

/**
 * DockerOverview
 */
export type DockerOverview = {
    /**
     * Version
     */
    version: string;
    /**
     * Total Containers
     */
    total_containers: number;
    /**
     * Running Containers
     */
    running_containers: number;
    /**
     * Failed Containers
     */
    failed_containers: number;
    /**
     * Images
     */
    images: number;
    /**
     * Volumes
     */
    volumes: number;
    /**
     * Logs Count
     */
    logs_count: number;
};

/**
 * DockerStatus
 */
export type DockerStatus = {
    /**
     * Status
     * Docker daemon status message
     */
    status: string;
};

/**
 * DockerVolumeSummary
 */
export type DockerVolumeSummary = {
    /**
     * Name
     * Volume name (if named Docker volume)
     */
    name?: string | null;
    /**
     * Type
     * Type of mount: volume or bind
     */
    type: string;
    /**
     * Source
     * Host source path or volume name
     */
    source: string;
    /**
     * Destination
     * Mount point inside the container
     */
    destination: string;
    /**
     * Driver
     * Volume driver (Docker-managed only)
     */
    driver?: string | null;
    /**
     * Mountpoint
     * Where the volume is mounted on host
     */
    mountpoint?: string | null;
    /**
     * Created At
     * Creation timestamp (Docker volumes)
     */
    created_at?: string | null;
    /**
     * Size
     * Human-readable volume size (if available)
     */
    size?: string | null;
    /**
     * Labels
     * Metadata labels (Docker volumes)
     */
    labels?: {
        [key: string]: string;
    };
};

/**
 * GenericMessageResponse
 */
export type GenericMessageResponse = {
    /**
     * Success
     * Indicates if the operation was successful
     */
    success?: boolean | null;
    /**
     * Code
     * HTTP-like status code representing the outcome
     */
    code?: number | null;
    /**
     * Message
     * Human-readable message explaining the result
     */
    message?: string | null;
};

/**
 * HTTPValidationError
 */
export type HttpValidationError = {
    /**
     * Detail
     */
    detail?: Array<ValidationError>;
};

/**
 * LogInfo
 */
export type LogInfo = {
    /**
     * Count
     * Total number of log entries
     */
    count: number;
    /**
     * Latest
     * Most recent log message
     */
    latest: string;
};

/**
 * MountInfo
 */
export type MountInfo = {
    /**
     * Source
     * Host path or volume name
     */
    source?: string | null;
    /**
     * Destination
     * Mount point inside the container
     */
    destination: string;
    /**
     * Mode
     * Read/write mode (e.g. 'rw')
     */
    mode?: string | null;
    /**
     * Type
     * Mount type (e.g. 'bind', 'volume')
     */
    type?: string | null;
};

/**
 * PerformanceWarning
 */
export type PerformanceWarning = {
    /**
     * Message
     */
    message: string;
};

/**
 * PortBinding
 */
export type PortBinding = {
    /**
     * Container Port
     * Port exposed in container (e.g. '80/tcp')
     */
    container_port: string;
    /**
     * Host Ip
     * Host IP (if published)
     */
    host_ip?: string | null;
    /**
     * Host Port
     * Published host port (if any)
     */
    host_port?: string | null;
};

/**
 * ValidationError
 */
export type ValidationError = {
    /**
     * Location
     */
    loc: Array<string | number>;
    /**
     * Message
     */
    msg: string;
    /**
     * Error Type
     */
    type: string;
};

export type RootGetData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/';
};

export type RootGetResponses = {
    /**
     * Successful Response
     */
    200: DockerStatus;
};

export type RootGetResponse = RootGetResponses[keyof RootGetResponses];

export type GetDockerOverviewDockerOverviewGetData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/docker/overview';
};

export type GetDockerOverviewDockerOverviewGetResponses = {
    /**
     * Successful Response
     */
    200: DockerOverview;
};

export type GetDockerOverviewDockerOverviewGetResponse = GetDockerOverviewDockerOverviewGetResponses[keyof GetDockerOverviewDockerOverviewGetResponses];

export type GetTopContainersDockerTopContainersGetData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/docker/top-containers';
};

export type GetTopContainersDockerTopContainersGetResponses = {
    /**
     * Response Get Top Containers Docker Top Containers Get
     * Successful Response
     */
    200: Array<ContainerStats>;
};

export type GetTopContainersDockerTopContainersGetResponse = GetTopContainersDockerTopContainersGetResponses[keyof GetTopContainersDockerTopContainersGetResponses];

export type GetPerformanceWarningDockerPerformanceWarningGetData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/docker/performance-warning';
};

export type GetPerformanceWarningDockerPerformanceWarningGetResponses = {
    /**
     * Successful Response
     */
    200: PerformanceWarning;
};

export type GetPerformanceWarningDockerPerformanceWarningGetResponse = GetPerformanceWarningDockerPerformanceWarningGetResponses[keyof GetPerformanceWarningDockerPerformanceWarningGetResponses];

export type GetLatestLogDockerLogsLatestGetData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/docker/logs/latest';
};

export type GetLatestLogDockerLogsLatestGetResponses = {
    /**
     * Successful Response
     */
    200: LogInfo;
};

export type GetLatestLogDockerLogsLatestGetResponse = GetLatestLogDockerLogsLatestGetResponses[keyof GetLatestLogDockerLogsLatestGetResponses];

export type CheckDockerStatusDockerStatusGetData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/docker-status';
};

export type CheckDockerStatusDockerStatusGetResponses = {
    /**
     * Successful Response
     */
    200: DockerStatus;
};

export type CheckDockerStatusDockerStatusGetResponse = CheckDockerStatusDockerStatusGetResponses[keyof CheckDockerStatusDockerStatusGetResponses];

export type ListContainersContainersGetData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * All
         * Show all containers, including stopped
         */
        all?: boolean;
    };
    url: '/containers';
};

export type ListContainersContainersGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type ListContainersContainersGetError = ListContainersContainersGetErrors[keyof ListContainersContainersGetErrors];

export type ListContainersContainersGetResponses = {
    /**
     * Response List Containers Containers Get
     * Successful Response
     */
    200: Array<ContainerSummary>;
};

export type ListContainersContainersGetResponse = ListContainersContainersGetResponses[keyof ListContainersContainersGetResponses];

export type GetContainerDetailsContainersContainerIdGetData = {
    body?: never;
    path: {
        /**
         * Container Id
         */
        container_id: string;
    };
    query?: never;
    url: '/containers/{container_id}';
};

export type GetContainerDetailsContainersContainerIdGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type GetContainerDetailsContainersContainerIdGetError = GetContainerDetailsContainersContainerIdGetErrors[keyof GetContainerDetailsContainersContainerIdGetErrors];

export type GetContainerDetailsContainersContainerIdGetResponses = {
    /**
     * Successful Response
     */
    200: ContainerDetails;
};

export type GetContainerDetailsContainersContainerIdGetResponse = GetContainerDetailsContainersContainerIdGetResponses[keyof GetContainerDetailsContainersContainerIdGetResponses];

export type GetContainerLogsContainersContainerIdLogsGetData = {
    body?: never;
    path: {
        /**
         * Container Id
         */
        container_id: string;
    };
    query?: {
        /**
         * Tail
         */
        tail?: number;
    };
    url: '/containers/{container_id}/logs';
};

export type GetContainerLogsContainersContainerIdLogsGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type GetContainerLogsContainersContainerIdLogsGetError = GetContainerLogsContainersContainerIdLogsGetErrors[keyof GetContainerLogsContainersContainerIdLogsGetErrors];

export type GetContainerLogsContainersContainerIdLogsGetResponses = {
    /**
     * Successful Response
     */
    200: string;
};

export type GetContainerLogsContainersContainerIdLogsGetResponse = GetContainerLogsContainersContainerIdLogsGetResponses[keyof GetContainerLogsContainersContainerIdLogsGetResponses];

export type StartContainerContainersContainerIdStartPostData = {
    body?: never;
    path: {
        /**
         * Container Id
         */
        container_id: string;
    };
    query?: never;
    url: '/containers/{container_id}/start';
};

export type StartContainerContainersContainerIdStartPostErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type StartContainerContainersContainerIdStartPostError = StartContainerContainersContainerIdStartPostErrors[keyof StartContainerContainersContainerIdStartPostErrors];

export type StartContainerContainersContainerIdStartPostResponses = {
    /**
     * Successful Response
     */
    200: GenericMessageResponse;
};

export type StartContainerContainersContainerIdStartPostResponse = StartContainerContainersContainerIdStartPostResponses[keyof StartContainerContainersContainerIdStartPostResponses];

export type StopContainerContainersContainerIdStopPostData = {
    body?: never;
    path: {
        /**
         * Container Id
         */
        container_id: string;
    };
    query?: never;
    url: '/containers/{container_id}/stop';
};

export type StopContainerContainersContainerIdStopPostErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type StopContainerContainersContainerIdStopPostError = StopContainerContainersContainerIdStopPostErrors[keyof StopContainerContainersContainerIdStopPostErrors];

export type StopContainerContainersContainerIdStopPostResponses = {
    /**
     * Successful Response
     */
    200: GenericMessageResponse;
};

export type StopContainerContainersContainerIdStopPostResponse = StopContainerContainersContainerIdStopPostResponses[keyof StopContainerContainersContainerIdStopPostResponses];

export type RestartContainerContainersContainerIdRestartPostData = {
    body?: never;
    path: {
        /**
         * Container Id
         */
        container_id: string;
    };
    query?: never;
    url: '/containers/{container_id}/restart';
};

export type RestartContainerContainersContainerIdRestartPostErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type RestartContainerContainersContainerIdRestartPostError = RestartContainerContainersContainerIdRestartPostErrors[keyof RestartContainerContainersContainerIdRestartPostErrors];

export type RestartContainerContainersContainerIdRestartPostResponses = {
    /**
     * Successful Response
     */
    200: GenericMessageResponse;
};

export type RestartContainerContainersContainerIdRestartPostResponse = RestartContainerContainersContainerIdRestartPostResponses[keyof RestartContainerContainersContainerIdRestartPostResponses];

export type ListDockerImagesImagesGetData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/images';
};

export type ListDockerImagesImagesGetResponses = {
    /**
     * Response List Docker Images Images Get
     * Successful Response
     */
    200: Array<DockerImageSummary>;
};

export type ListDockerImagesImagesGetResponse = ListDockerImagesImagesGetResponses[keyof ListDockerImagesImagesGetResponses];

export type ListDockerVolumesVolumesGetData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/volumes';
};

export type ListDockerVolumesVolumesGetResponses = {
    /**
     * Response List Docker Volumes Volumes Get
     * Successful Response
     */
    200: Array<DockerVolumeSummary>;
};

export type ListDockerVolumesVolumesGetResponse = ListDockerVolumesVolumesGetResponses[keyof ListDockerVolumesVolumesGetResponses];

export type GetContainerVolumesContainersContainerIdVolumesGetData = {
    body?: never;
    path: {
        /**
         * Container Id
         */
        container_id: string;
    };
    query?: never;
    url: '/containers/{container_id}/volumes';
};

export type GetContainerVolumesContainersContainerIdVolumesGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type GetContainerVolumesContainersContainerIdVolumesGetError = GetContainerVolumesContainersContainerIdVolumesGetErrors[keyof GetContainerVolumesContainersContainerIdVolumesGetErrors];

export type GetContainerVolumesContainersContainerIdVolumesGetResponses = {
    /**
     * Response Get Container Volumes Containers  Container Id  Volumes Get
     * Successful Response
     */
    200: Array<DockerVolumeSummary>;
};

export type GetContainerVolumesContainersContainerIdVolumesGetResponse = GetContainerVolumesContainersContainerIdVolumesGetResponses[keyof GetContainerVolumesContainersContainerIdVolumesGetResponses];

export type ClientOptions = {
    baseURL: 'http://localhost:8000' | (string & {});
};